<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Becky Jaimes</title>
  <link href="http://blog.datasommelier.com/atom.xml" rel="self"/>
  <link href="http://blog.datasommelier.com"/>
  <updated>2017-10-07T18:35:39.324Z</updated>
  <id>http://blog.datasommelier.com</id>
  <author>
    <name>Becky Jaimes</name>
  </author>
  <entry>
    <title>What database should I use?</title>
    <link href="http://blog.datasommelier.com/Document-Databases"/>
    <id>http://blog.datasommelier.com/Document-Databases</id>
    <updated>2017-10-07T00:00:00.000Z</updated>
    <author>
      <name>Becky Jaimes</name>
    </author>
    <summary type="html">&lt;p&gt;Use a relational database like PostgreSQL unless you have a specific reason not to&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Use a relational database like PostgreSQL unless you have a specific reason not to&lt;/p&gt;
&lt;h3 id=&quot;when-to-use-mongodb-&quot;&gt;When to use MongoDB?&lt;/h3&gt;
&lt;p&gt;Never.&lt;/p&gt;
&lt;p&gt;MongoDB is a document-oriented database. These type of databases do not have the concept of tables or predefined columns; instead, document databases store data as a collection of records without schemas, structure or relations to other records. In MongoDB’s case, it stores the data under collections (instead of tables) where each row of the collection is one JSON object (without columns).&lt;/p&gt;
&lt;p&gt;You’ll find many articles talking you out of using MongoDB, so let’s skip that part. Something important to note is that many of those articles are written by users that dislike MongoDB for the wrong reasons: they’ve tried to use a document database when dealing with relational data. And even though it is somewhat forgivable because schema design is hard, using document storage when dealing with relational data is a poor architectural choice (at least most of the time).&lt;/p&gt;
&lt;p&gt;There are other articles telling you that you shouldn’t use MongoDB because it is a poorly engineered storage option run on marketing and not on technical merit. Security and support issues have been part of MongoDB since its inception making it a poor choice even if you do need a document store. Those are the better reasons to stay away from MongoDB.&lt;/p&gt;
&lt;p&gt;Because most data is relational, use cases of databases that are designed to store, represent, or work with documents tend to be very specific. A search engine that is constantly executing queries that require more than matching an exact string is one example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/QOcPX3r.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Notice how the results of querying “longboarding in bolinas” yields results that don’t exactly match the input string. If we had to join data from different tables (or even from the same table) in order to get those results, it could take a long time; instead, we can do a faster search by querying a document database that stores a ‘denormalized’ version of the data which could then be used to create normalized search indexes.&lt;/p&gt;
&lt;p&gt;An example of the indexing process is when variants of a term are mapped to a single, standardized form. For instance mapping &lt;em&gt;“surfing”&lt;/em&gt; and &lt;em&gt;“surfer”&lt;/em&gt; to &lt;em&gt;“surf”&lt;/em&gt; ignoring the distinction between &lt;em&gt;surfing&lt;/em&gt; and &lt;em&gt;surfer&lt;/em&gt;. This is why when using normalized search indexes, a query for &lt;em&gt;“longboarding in bolinas”&lt;/em&gt; ([“longboard”, “bolinas”]) could yield its exact match  &lt;em&gt;“longboarding in bolinas”&lt;/em&gt; and also other results including similar phrases such as &lt;em&gt;“Continue on to Bolinas, which has stellar longboard waves…”&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Full-text search engine queries could get very complex. The main record and all of its related searchable data should be in a single object — even if some of that related data would &lt;em&gt;normally&lt;/em&gt; be part of a separate record. This means faster results because with one lookup you are able to get the applicable record instead of following relations.&lt;/p&gt;
&lt;h3 id=&quot;which-are-the-best-document-stores-&quot;&gt;Which are the best document stores?&lt;/h3&gt;
&lt;p&gt;It depends on your requirements. Cases where document storage is the right solution are almost always really specific, like the previous search example. It also just so happens that PostgreSQL can be used as a document store, because you can store and work with arbitrarily nested data (through a JSONB column and the associated json_* functions). It’s not something commonly used but it can be useful in some cases like for API scraping (so that you can store the original API response even if its exact format may vary over time, outside of your control or knowledge).&lt;/p&gt;
&lt;p&gt;A better question would be something like “If I want to build a search engine, what are the best solutions?” in which case you might consider ElasticSearch (or the underlying tech, Lucene).  The usual answer to “What database should I use?” is &lt;strong&gt;“Use an RDBMS like PostgreSQL unless you have a specific reason not to”&lt;/strong&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Promises</title>
    <link href="http://blog.datasommelier.com/promises"/>
    <id>http://blog.datasommelier.com/promises</id>
    <updated>2017-01-10T00:00:00.000Z</updated>
    <author>
      <name>Becky Jaimes</name>
    </author>
    <summary type="html">&lt;p&gt;What are promises&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;What are promises&lt;/p&gt;
&lt;p&gt;A promise is an object that represents an async operation (process) that’s still in progress.  The purpose of Promises is to make it easier to write sequential code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Promise.try(() =&amp;gt; {
  return taskOne();
}).then((result) =&amp;gt; {
  return taskTwo();
}).then((result) =&amp;gt; {
  return taskThree();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above snippet, even though there are technically 6 promises involved, only three implement real functionality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Promise.try(…)  -&amp;gt; Tracks the result of taskOne below&lt;/li&gt;
&lt;li&gt;taskOne           -&amp;gt; &lt;strong&gt;Implements real functionality&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;.then(…)        -&amp;gt; Propagate the &lt;code&gt;result&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;taskTwo           -&amp;gt; &lt;strong&gt;Implements real functionality&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;.then(…)        -&amp;gt; Propagate the &lt;code&gt;result&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;taskThree         -&amp;gt; &lt;strong&gt;Implements real functionality&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The order of execution:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--- tick 0 ---
 Promise.try called
 taskOne called
 a Promise is returned from taskOne
 return that Promise from the Promise.try callback, Promise.try will now track it
 first .then called (note, .then itself, *not* the callback) with a callback as argument
 second .then called, with a callback as argument
 --- tick 10 ---
 taskOne Promise resolves
 Promise.try Promise resolves
 first .then callback called
 taskTwo called
 a Promise is returned from taskTwo
 return that Promise from the first .then callback, the first .then will now track it
 --- tick 20 ---
 taskTwo Promise resolves
 first .then Promise resolves
 second .then callback called
 taskThree called
 a Promise is returned from taskThree
 return that Promise from the second .then callback, the second .then will now track it
 --- tick 30 ---
 taskThree Promise resolves
 second .then Promise resolves
 --- the end ---
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;what-s-the-difference-with-callbacks-&quot;&gt;What’s the difference with callbacks?&lt;/h3&gt;
&lt;p&gt;The main difference between Promises and callbacks is that a Promise is a placeholder object you get access to immediately that represents the in-progress operation; in a callback you have to immediately specify the next behaviour.&lt;/p&gt;
&lt;p&gt;Nested callbacks also allow for writing sequential async code, but are more difficult to use right.
Similar functionality of the above snippet as a series of nested callbacks:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;taskOne((err, result) =&amp;gt; {
  taskTwo((err, result) =&amp;gt; {
    taskThree((err, result) =&amp;gt; {
      // ...
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With error-first callbacks you have to &lt;strong&gt;immediately&lt;/strong&gt; specify the next code to run when a task completes. This is not true for Promises. With Promises you are able to attach behaviour at any time including after the Promise has already resolved. This allows for a lot of improvements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compose things easier - &lt;code&gt;Promise.all([promise1, promise2])&lt;/code&gt; will produce a combined Promise that resolves when &lt;code&gt;promise1&lt;/code&gt; and &lt;code&gt;promise2&lt;/code&gt; both resolve. &lt;code&gt;Promise.all&lt;/code&gt; wires up things internally, which it can do because it can specify behaviour at any time on &lt;code&gt;promise1&lt;/code&gt; and &lt;code&gt;promise2&lt;/code&gt;, including its own behaviour.&lt;/li&gt;
&lt;li&gt;Propagate errors automatically - Because behaviour can be attached at any time, you can return a Promise from another Promise’s &lt;code&gt;.then&lt;/code&gt; callback, and then that other Promise can wire up error propagation automatically.&lt;/li&gt;
&lt;li&gt;The returned value isn’t the actual result, but it can be returned and passed around just as easily.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Never forget to take your vitamins again</title>
    <link href="http://blog.datasommelier.com/zapier-slack-smartthings"/>
    <id>http://blog.datasommelier.com/zapier-slack-smartthings</id>
    <updated>2016-09-21T00:00:00.000Z</updated>
    <author>
      <name>Becky Jaimes</name>
    </author>
    <summary type="html">&lt;p&gt;SmartThings, IFTTT, Zapier, and Slack to the rescue&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;SmartThings, IFTTT, Zapier, and Slack to the rescue&lt;/p&gt;
&lt;p&gt;When I worked at Segment, we built bots to complete annoying and mundane tasks. Wishing for something similar at home, I built a series of triggers so that Slackbot records the last time I took my vitamins and then reminds me when I need to take them again.&lt;/p&gt;
&lt;p&gt;To begin, I used a &lt;a href=&quot;https://shop.smartthings.com/#!/products/samsung-smartthings-multipurpose-sensor&quot;&gt;multipurpose sensor&lt;/a&gt; from SmartThings (used to alert when a door or window opens or closes) and using &lt;a href=&quot;https://smile.amazon.com/Duck-282116-Printed-Inches-Single/dp/B00CJGF6EI/ref=sr_1_1?ie=UTF8&amp;amp;qid=1474492591&amp;amp;sr=8-1&amp;amp;keywords=duck+tape+owl&quot;&gt;this&lt;/a&gt;  awesome duck date, I taped it to the vitamin bottle:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cldup.com/BSgh11Oowo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next, for each time the sensor closes, I used an IFTTT recipe to trigger a Slack message telling me that I just took a vitamin:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cldup.com/MYzYmI2Fg2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;I also had to set another trigger to a Google sheet that records the time the bottle closed (since I wasn’t able to get IFTTT to properly send a &lt;code&gt;/remind&lt;/code&gt; message to Slack):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cldup.com/1BVZAatq_m.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Lastly, I connected Zapier to that Google sheet and created a Zap to Slack with a &lt;code&gt;/remind me to take my vitamins in 12 hours&lt;/code&gt; message:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cldup.com/UW2pYYnmzn.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;If I get the slack message when I’m not near my vitamins, I can just hit &lt;code&gt;remind me in 15 minutes&lt;/code&gt; option, and get a new notification later.  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cldup.com/siwQI7CEIT.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This reminder has been so helpful that I am going to replicate a similar project using a Raspberry Pi and a sensor connected to the dog food container. That way both my husband and I know when the dawgs have been fed and unfortunately for them, prevent double dinners.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Newborn percentiles</title>
    <link href="http://blog.datasommelier.com/Newborn-measurements"/>
    <id>http://blog.datasommelier.com/Newborn-measurements</id>
    <updated>2016-05-28T00:00:00.000Z</updated>
    <author>
      <name>Becky Jaimes</name>
    </author>
    <summary type="html">&lt;p&gt;How did the nurse know that my son was born in the 96th percentile?&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;How did the nurse know that my son was born in the 96th percentile?&lt;/p&gt;
&lt;p&gt;When my son was born earlier this month, the nurse measured his length, head circumference, and weight. She then informed us that 96% of male babies were born below his height. How did she know that? &lt;/p&gt;
&lt;p&gt;The concept of a normal distribution is helpful for understanding this percentage. In a normal distribution, most observations are grouped around the middle; more precisely, 34% fall between the mean and +1 standard deviation, and the other 34% -1 standard deviation. Also, in a normal distribution, 50% of the observations fall below the mean, and the other half above the mean. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/a/a9/Empirical_Rule.PNG/675px-Empirical_Rule.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is useful when calculating other interesting statistics, like how many individuals do we expect to fall below or above a particular point.  If a baby is 1 standard deviation above the mean, then we know that such baby is at the 84th percentile (50% which correspond to all the individuals below the mean + 34% which correspond to all the individuals between the mean and 1 standard deviation).&lt;/p&gt;
&lt;p&gt;In statistcs, a z-score is equivalent to how many standard deviations your observation is from the mean. A positive score means that your observation lays above the mean, and a negative score means below the mean. If we have the following input:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My child measures 53.34 cm of length at birth&lt;/li&gt;
&lt;li&gt;The mean of length in newborn boys is &lt;a href=&quot;http://www.who.int/childgrowth/standards/LFA_boys_0_13_zscores.pdf?ua=1&quot;&gt;49.9 cm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The standard deviation of length in newborn boys is &lt;a href=&quot;http://www.who.int/childgrowth/standards/LFA_boys_0_13_zscores.pdf?ua=1&quot;&gt;1.89 cm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(The above mean and standard deviation are taken from data at the World Health Organization - the leading organization promoting these percentiles)&lt;/p&gt;
&lt;p&gt;Then we can calculate the z-score, like so:&lt;/p&gt;
&lt;p&gt;[My Measure - Mean] / Standard Deviation = z-score&lt;/p&gt;
&lt;p&gt;So for us, we get a z-score of 1.82 ( [53.34 - 49.9] / 1.89 = 1.82). Looking at a &lt;a href=&quot;http://math.arizona.edu/~rsims/ma464/standardnormaltable.pdf&quot;&gt;z-score chart&lt;/a&gt;, we gather that 1.82 corresponds to 0.9641, which means that 96.41% of the population fall at or below this measure.&lt;/p&gt;
&lt;p&gt;According to the World Health Organization the data for some measurements such as weight, is &lt;a href=&quot;http://www.who.int/childgrowth/training/module_c_interpreting_indicators.pdf&quot;&gt;not normally distributed&lt;/a&gt; - it is right skewed (the right side - big babies - is longer than the left). Cross checking this reference by looking at a different data set, from a different source -babies born only in the US- reveals a contradiction: the data set is symmetrical (a little kurtotic but symmetrical). Which makes me wonder about the WHO’s percentile obsession.&lt;/p&gt;
&lt;p&gt;So they’ll tell you that your baby is in the 34% in weight, 96% of height, and 90% of brain circumpherence. So what? Does it all mean that my baby is tall, dark, handsome and wicked smart and because of that he is going to be accepted into daycare and then into Harvard, and then become POTUS? Sure mom. Especially if you weigh him after a big meal. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Python and SQLAlchemy</title>
    <link href="http://blog.datasommelier.com/Python-and-SQLAlchemy.md"/>
    <id>http://blog.datasommelier.com/Python-and-SQLAlchemy.md</id>
    <updated>2016-04-20T00:00:00.000Z</updated>
    <author>
      <name>Becky Jaimes</name>
    </author>
    <summary type="html">&lt;p&gt;Interacting with a SQL database using SQLAlchemy&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Interacting with a SQL database using SQLAlchemy&lt;/p&gt;
&lt;p&gt;There are various packages and libraries that interact with SQL (SQLAlchemy, Django, pewee, SQLObject, Storm, pony) but the most popular and probably the best and most beautiful Python library ever written is SQLAlchemy.
SQLAlchemy allows you to write raw SQL directly and operate in SQL tables using them essentially as Python classes - basically, read and write data using SQL and then treat that data as a Python container.&lt;/p&gt;
&lt;h2 id=&quot;how-to-use-sqlalchemy-&quot;&gt;How to use SQLAlchemy:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create an engine&lt;/li&gt;
&lt;li&gt;Define tables&lt;/li&gt;
&lt;li&gt;Add instances&lt;/li&gt;
&lt;li&gt;Query&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;create-an-engine-&quot;&gt;Create an engine:&lt;/h3&gt;
&lt;p&gt;Create an engine that establishes a connection with the database and sets the framework in order to make SQL requests. Like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from sqlalchemy import create_engine
engine = create_engine(&amp;#39;sqlite:////phonebook.db&amp;#39;, echo=True)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;define-tables-&quot;&gt;Define tables:&lt;/h3&gt;
&lt;p&gt;Create a class call &lt;code&gt;Base&lt;/code&gt; (using &lt;code&gt;declarative_base&lt;/code&gt;) to define our various tables - SQLAlchemy will refer to this class to create the table schemas. Use the &lt;code&gt;__tablename__&lt;/code&gt; member to name the table and &lt;code&gt;__repr__&lt;/code&gt; method when printing a table row. Like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from sqlalchemy import Column, Integer, String
class Phonebook(Base):
    __tablename__ = &amp;quot;friends&amp;quot;
    id = Column(Integer, primary_key=True)
    name = Column(String)
    email = Column(String)
    phone = Column(String)

    def __repr__(self):
        return &amp;quot;&amp;lt;Phonebook(name=&amp;#39;%s&amp;#39;, email=&amp;#39;%s&amp;#39;, phone=&amp;#39;%s&amp;#39;)&amp;gt;&amp;quot;\
            %(self.name, self.email, self.phone)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that we have the engine, use the metadata &lt;code&gt;create_all&lt;/code&gt; method to actually create the database - if working on a mac, run this from the terminal using iPython, if working from a PC just append this line to the .py file that we are building here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Base.metadata.create_all(engine)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;add-instances-&quot;&gt;Add instances:&lt;/h3&gt;
&lt;p&gt;Establish a session in order to interact with the database, and create instances and rows so that we can add them to the session:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# create tables
Base.metadata.create_all(engine)

# establish a session
from sqlalchemy.orm import sessionmaker

session = sessionmaker(bind=engine)
session = session()

# create instances
# use ** to unpack the key-value pairs
james = Phonebook(**friends_numbers[0])

# example: how to add a single row
# add james&amp;#39;s record to the Phonebook database
session.add(james)
session.new

# example: how to delete a single row
# delete james&amp;#39;s record from the Phonebook database
session.expunge(james)
session.new

# create a list with our friend&amp;#39;s numbers
friends_numbers = [
    {&amp;#39;name&amp;#39;: &amp;#39;James Rodriguez&amp;#39;,
     &amp;#39;email&amp;#39;: &amp;#39;james@email.com&amp;#39;,
     &amp;#39;phone&amp;#39;: &amp;#39;123-456-7890&amp;#39;},
    {&amp;#39;name&amp;#39;: &amp;#39;Pibe Valderrama&amp;#39;,
     &amp;#39;email&amp;#39;: &amp;#39;pibe@email.com&amp;#39;,
     &amp;#39;phone&amp;#39;: &amp;#39;111-222-3333&amp;#39;},
    {&amp;#39;name&amp;#39;: &amp;#39;Farid Mondragon&amp;#39;,
     &amp;#39;email&amp;#39;: &amp;#39;farid@email.com&amp;#39;,
     &amp;#39;phone&amp;#39;: &amp;#39;222-333-4444&amp;#39;}     
     ]

# add all records from the friends_numbers list into the db
phonebook_rows = [Phonebook(**p) for p in friends_numbers]
session.add_all(phonebook_rows)
session.commit()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;query-the-database&quot;&gt;Query the database&lt;/h3&gt;
&lt;p&gt;Now you can go ahead a run any query you’d like. All you have to do is use the &lt;code&gt;session&lt;/code&gt; method. Like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# query the database
# count how many records we have
print session.query(Phonebook).count()

# find James Rodriguez record using filter_by
friend = session.query(Phonebook).filter_by(name=&amp;#39;James Rodriguez&amp;#39;)
result = list(friend)
print result
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For a list of all available methods, check SQLAlchemy documentation &lt;a href=&quot;http://docs.sqlalchemy.org/en/latest/orm/query.html&quot;&gt;here&lt;/a&gt;.
The entire code for this article is available &lt;a href=&quot;https://github.com/TheBecky/python_awesomeness/blob/master/python_sql.py&quot;&gt;here&lt;/a&gt;. Send me a note if you have any issues with the above code and would like help debugging becky@datasommelier.com&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>When to ship without analytics</title>
    <link href="http://blog.datasommelier.com/when-to-ship-without-analytics"/>
    <id>http://blog.datasommelier.com/when-to-ship-without-analytics</id>
    <updated>2016-01-21T00:00:00.000Z</updated>
    <author>
      <name>Becky Jaimes</name>
    </author>
    <summary type="html">&lt;p&gt;Never.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Never.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Python and the Twitter API</title>
    <link href="http://blog.datasommelier.com/Python-and-Twitter"/>
    <id>http://blog.datasommelier.com/Python-and-Twitter</id>
    <updated>2015-12-30T00:00:00.000Z</updated>
    <author>
      <name>Becky Jaimes</name>
    </author>
    <summary type="html">&lt;p&gt;Run basic text analytics on a collection of Tweets&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Run basic text analytics on a collection of Tweets&lt;/p&gt;
&lt;p&gt;The Twitter API allows us to collect data based on a particular keyword, user handle, or hashtag.  We can filter those results by language, geographic location, and either the latest, most popular tweets, or tweets within a specified timeframe. Also, the API provides some tools to run basic text analytics such as finding entities in a particular collection of tweets. To collect and run basic text analytics in a collection of tweets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Connect to the API&lt;/li&gt;
&lt;li&gt;Search Tweets&lt;/li&gt;
&lt;li&gt;Extract Tweet entities&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;connect-to-the-twitter-api-&quot;&gt;Connect to the Twitter API:&lt;/h2&gt;
&lt;p&gt;To establish a successful connection with the API we first need consumer and oAuth tokens from a newly created &lt;a href=&quot;https://apps.twitter.com/&quot;&gt;Twitter App&lt;/a&gt;, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import twitter

def oauth_login():
    CONSUMER_KEY = &amp;#39;0pJAid2aqrRtgwe6dKvPAerp8b&amp;#39;
    CONSUMER_SECRET = &amp;#39;rfrb0fbGgCvpf1sgtRd7OsrBCT7p8DPWuB8WpeLJ9LfelJW8sp&amp;#39;
    OAUTH_TOKEN = &amp;#39;15648766-lxT6QBxMgp69gFDsef6FI4KqporqqvOyd4U5t4qD7&amp;#39;
    OAUTH_TOKEN_SECRET = &amp;#39;KYdm5roVu2xMlo5asSDfs1LGHwYBRL0Gxi5IkXMRZLsuJR2&amp;#39;

    auth = twitter.oauth.OAuth(OAUTH_TOKEN, OAUTH_TOKEN_SECRET, CONSUMER_KEY, CONSUMER_SECRET)

    twitter_api = twitter.Twitter(auth=auth)
    return twitter_api
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Make sure you substitue the tokens with your own credentials as the above keys are just place holders and will not work.&lt;/p&gt;
&lt;h2 id=&quot;search-tweets&quot;&gt;Search Tweets&lt;/h2&gt;
&lt;p&gt;Lets define two functions. One to find Tweets based in our criteria, and then, another function to select the most favorited Tweets from that collection:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Language = English
# Result type =  recent or popular
# count = how many tweets to return
# geocode = “latitude,longitude,radius”, for example, “&amp;quot;37.781157,-122.398720,10mi&amp;quot;”
#           will limit the results for tweets within 10 miles of San Francisco
# Other parameters not used but available: until, since_id, max_id

def twitter_search(twitter_api, q, max_results=200, **kw):  
    search_results = twitter_api.search.tweets(q=q, count=100, lang=&amp;#39;en&amp;#39;, result_type=&amp;#39;recent&amp;#39;,  geocode= &amp;quot;37.781157,-122.398720,10mi&amp;quot;, **kw)  
    statuses = search_results[&amp;#39;statuses&amp;#39;]

    max_results = min(100, max_results)

    for _ in range(10):
        try:
            next_results = search_results[&amp;#39;search_metadata&amp;#39;][&amp;#39;next_results&amp;#39;]
        except KeyError as e:
            break

        kwargs = dict([ kv.split(&amp;#39;=&amp;#39;) 
                        for kv in next_results[1:].split(&amp;quot;&amp;amp;&amp;quot;) ])

        search_results = twitter_api.search.tweets(**kwargs)
        statuses += search_results[&amp;#39;statuses&amp;#39;]

        if len(statuses) &amp;gt; max_results: 
            break

    return statuses

def find_popular_tweets(twitter_api, statuses, retweet_threshold=30):

    return [ status
                for status in statuses 
                    if status[&amp;#39;retweet_count&amp;#39;] &amp;gt; retweet_threshold ] 

twitter_api = oauth_login()
q = &amp;quot;surf&amp;quot;

search_results = twitter_search(twitter_api, q, max_results=20)
popular_tweets = find_popular_tweets(twitter_api, search_results)

print (&amp;quot;************POPULAR TWEETS*********************&amp;quot;)
print (&amp;quot;************(TWEET, RE_TWEET COUNT*************&amp;quot;)
print (&amp;quot;&amp;quot;)
for tweet in popular_tweets:
    print (tweet[&amp;#39;text&amp;#39;].encode(&amp;#39;utf8&amp;#39;), tweet[&amp;#39;retweet_count&amp;#39;])
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;extract-tweet-entities&quot;&gt;Extract Tweet entities&lt;/h2&gt;
&lt;p&gt;Create a function that extracts Tweet entities such as user handles, hashtags, and URLs from our collection.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def extract_tweet_entities(statuses):
    if len(statuses) == 0:
        return [], [], [], []

    screen_names = [ user_mention[&amp;#39;screen_name&amp;#39;] 
                         for status in statuses
                            for user_mention in status[&amp;#39;entities&amp;#39;][&amp;#39;user_mentions&amp;#39;] ]

    hashtags = [ hashtag[&amp;#39;text&amp;#39;] 
                     for status in statuses 
                        for hashtag in status[&amp;#39;entities&amp;#39;][&amp;#39;hashtags&amp;#39;] ]

    urls = [ url[&amp;#39;expanded_url&amp;#39;] 
                     for status in statuses 
                        for url in status[&amp;#39;entities&amp;#39;][&amp;#39;urls&amp;#39;] ]

    return screen_names, hashtags, urls

# provides the entity and the frequency for each collection
def get_common_tweet_entities(statuses, entity_threshold=3):
    tweet_entities = [  e
                        for status in statuses
                            for entity_type in extract_tweet_entities([status]) 
                                for e in entity_type 
                     ]
    c = Counter(tweet_entities).most_common()

    return [ (k,v) 
             for (k,v) in c
                 if v &amp;gt;= entity_threshold
           ]

twitter_api = oauth_login()
q = &amp;quot;surf&amp;quot;

search_results = twitter_search(twitter_api, q, max_results=20)
popular_tweets = find_popular_tweets(twitter_api, search_results)

statuses = twitter_search(twitter_api, q)
screen_names, hashtags, urls = extract_tweet_entities(statuses)


print (&amp;quot;************Tweet Entities*********************&amp;quot;)
print (&amp;quot;***********************************************&amp;quot;)
print (&amp;quot;&amp;quot;)
print (&amp;quot;**************TOP 50 HANDLES*******************&amp;quot;)
# json.dumps([dict(mpn=pn) for pn in lst])
print (json.dumps(screen_names[0:50], indent=1))
print (&amp;quot;&amp;quot;)
print (&amp;quot;**************TOP 50 HASHTAGS*****************&amp;quot;)
print(json.dumps(hashtags[0:50], indent=1))
print (&amp;quot;&amp;quot;)
print (&amp;quot;**************TOP 50 URLs*********************&amp;quot;)
print(json.dumps(urls[0:50], indent=1))
print (&amp;quot;&amp;quot;)

common_entities = get_common_tweet_entities(search_results)

print (&amp;quot;*****************************************************&amp;quot;)
print (&amp;quot;************Most Common Entities*********************&amp;quot;)
print (common_entities)
print (&amp;quot;*****************************************************&amp;quot;)
print (&amp;quot;*****************************************************&amp;quot;)


# calculate average number of words per tweet:
def analyze_tweet_content(statuses):
    if len(statuses) == 0:
        print (&amp;quot;No statuses to analyze&amp;quot;)
        return

    def average_words(statuses):
        total_words = sum([ len(s.split()) for s in statuses ]) 
        return 1.0*total_words/len(statuses)

    status_texts = [ status[&amp;#39;text&amp;#39;] for status in statuses ]
    screen_names, hashtags, urls, _ = extract_tweet_entities(statuses)

    words = [ w 
          for t in status_texts 
              for w in t.split() ]

    print (&amp;quot;Averge words per tweet:&amp;quot;, average_words(status_texts))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To find the account that owns the most favorited tweets of a person:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Analyze a user&amp;#39;s favorite tweets. Insert user handle
analyze_tweet_content(search_results)
print (&amp;quot;*****************************************************&amp;quot;)
print (&amp;quot;*****************************************************&amp;quot;)
analyze_favorites(twitter_api, &amp;quot;theebecky&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The full code can be found &lt;a href=&quot;&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>When to sign in with your Google account</title>
    <link href="http://blog.datasommelier.com/Sign-in-with-Google-Github-or-Twitter"/>
    <id>http://blog.datasommelier.com/Sign-in-with-Google-Github-or-Twitter</id>
    <updated>2015-10-10T00:00:00.000Z</updated>
    <author>
      <name>Becky Jaimes</name>
    </author>
    <summary type="html">&lt;p&gt;Or Twitter, Facebook or any other account that provides the service&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Or Twitter, Facebook or any other account that provides the service&lt;/p&gt;
&lt;p&gt;Some sites require passwords to have at least 6 characters, others require at least one number and a character (but make sure that the character is not a \ ), and others require you to have both a capital and a lower case letter… and make sure that the capital letter is not at the begining or at the end of the password. Oh, also make sure your password is unique to the site, and that you change it often. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/fUMJpI1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Inevitably, we all end up creating just one password. One really good password, you know, something like &lt;code&gt;pAssw0rd!&lt;/code&gt; and then use that REALLY good password for every site. And never change it. &lt;/p&gt;
&lt;p&gt;One problem with this technique is that if a site’s database is compromised, access to all other sites is compromised. We’ve heard that a thousand times already, however, and to most of us, the risk outweighs the annoyance. Note: If you click on “Forgot password” on any site and get an email with your actual password, run away from that service - your data is being handled by amateurs. If the site is able to send an email with the password you created, it means that the site is either saving your password in plain text, or is storing a simple encryption of your password. &lt;/p&gt;
&lt;p&gt;Storing plaintext or encrypted passwords with a simple key are the easiest methods for developers to handle passwords, and also the easiest to access by an attacker. A safer way for sites to deal with passwords is by using a salted version of the &lt;a href=&quot;https://crackstation.net/hashing-security.htm&quot;&gt;hashed password&lt;/a&gt; or by using an encryption algorithm such as &lt;a href=&quot;http://bcrypt.sourceforge.net/&quot;&gt;bcryt&lt;/a&gt; both of which are more involved processes from the developer standpoint. &lt;strong&gt;The safest way for sites to deal with passwords is to not deal with passwords at all&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;If you use your one really good password on every site, you will be better off logging in with either Google, Github, Twitter or any other site that offers a login service—in particular if your really good password is what you also use to login into any of those sites. The service is called oAuth. oAuth exchanges security keys between the new site and Google, Github or Twitter and they handle the logging without involving the creation of new passwords. Sometimes the new sites will ask your permission to export into their site additional data from Google, usually, your email address and avatar. Some more creepy services ask for permission to access your contacts, demographic and geographic data, and others ask your permission to actually act on your behalf into the service (i.e. Tweet for you). &lt;/p&gt;
&lt;p&gt;Initially, you may be confused why Google, Github, or Twitter would offer a free service to handle logins through oAuth. Altruism? One motivation is to leverage as many services as possible to your account in order to reduce the chances of you churning and closing that account. For Google, the motivation might be more geared towards tracking which apps you use and how often. A newer and more interesting oAuth service provider is the banking industry. Now you can use your American Express login credentials to sign up to AirBnb, granting AirBnb access some data from your Amex account. When using oAuth is always important to check what data access or permissions you are granting to the new site.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LxgZ0Ry.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Unless the new site is asking for too much data, for me, the benefits from oAuth almost always outweighs the risk of compromising my REALLY good password. Even if that means granting access to additional basic data points so that Google can have a clearer picture of “Who you are to Google.”&lt;/p&gt;
&lt;p&gt;To review the list of authorized applications on each of your accounts go to: &lt;a href=&quot;https://security.google.com/settings/security/permissions&quot;&gt;Google&lt;/a&gt;, &lt;a href=&quot;https://github.com/settings/applications&quot;&gt;Github&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/settings/applications&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Coming next: Who you are to Google &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Build a simple website and implement Segment</title>
    <link href="http://blog.datasommelier.com/Implement-Segment"/>
    <id>http://blog.datasommelier.com/Implement-Segment</id>
    <updated>2015-07-07T00:00:00.000Z</updated>
    <author>
      <name>Becky Jaimes</name>
    </author>
    <summary type="html">&lt;p&gt;5 steps. Completion time 45 minutes&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;5 steps. Completion time 45 minutes&lt;/p&gt;
&lt;p&gt;Note: The tutorial that follows is intended to encourage active learning for a non technical audience.&lt;/p&gt;
&lt;h2 id=&quot;1-create-an-account&quot;&gt;1. Create an Account&lt;/h2&gt;
&lt;p&gt;Create an account in GitHub (&lt;a href=&quot;https://github.com/new&quot;&gt;https://github.com/new&lt;/a&gt;) or sign in. If you are creating a new account, make sure to confirm your email address (go to your email and click on the confirm button on the message from Github). Some files will not update later if you haven’t confirmed your email address.&lt;/p&gt;
&lt;h2 id=&quot;2-create-a-repo&quot;&gt;2. Create a Repo&lt;/h2&gt;
&lt;p&gt;Create a new repository (click on the black + sign on the top right) and call it &lt;code&gt;yourusername.github.io&lt;/code&gt; . Since we are using Github pages to host this site, it is very important to follow the exact naming convention &lt;strong&gt;[YOUR USERNAME].github.io&lt;/strong&gt;. In my case, my new repository is called &lt;code&gt;beckyjaimes.github.io&lt;/code&gt;, check the box that initializes the repo with a README file, and click on the “Create repository” button.
&lt;img src=&quot;https://cloudup.com/ch3rFGk5D3P+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-create-an-index-html-file&quot;&gt;3. Create an index.html file&lt;/h2&gt;
&lt;p&gt;Create a new file by clicking on the blue + symbol next to your new repository’s name and call it index.html (this file will contain the code for your website’s default page)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cloudup.com/c0cFaR-2xwe+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;On that &lt;code&gt;index.html&lt;/code&gt; file, insert the following text, and commit that file by clicking on the green “Commit” button:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Home Questionaire&amp;lt;/title&amp;gt;
        &amp;lt;!--Placeholder for Google Analytics Snippet --&amp;gt;
        &amp;lt;!--Placeholder for MixPanel Snippet --&amp;gt;
        &amp;lt;!--Placeholder for KissMetrics Snippet --&amp;gt;
        &amp;lt;!--Placeholder for Segment Snippet --&amp;gt;
        &amp;lt;!--Placeholder for index.css link --&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;    
&amp;lt;br&amp;gt;
&amp;lt;h1&amp;gt;What is your favorite place to travel?&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;I am building a directory of the sweetest travel destinations.&amp;lt;/p&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;form name=&amp;quot;travel&amp;quot; onsubmit=&amp;quot;identify(event)&amp;quot;&amp;gt;
        What is your favorite travel destination?
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;input name=&amp;quot;destination&amp;quot; required=&amp;quot;&amp;quot; size=&amp;quot;81&amp;quot; type=&amp;quot;text&amp;quot;/&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        Any reccomendations (cool things to do, places to visit or restaurants to eat)?
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;textarea cols=&amp;quot;81&amp;quot; name=&amp;quot;details&amp;quot; required=&amp;quot;&amp;quot; rows=&amp;quot;10&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        Name:
        &amp;lt;input name=&amp;quot;fullname&amp;quot; required=&amp;quot;&amp;quot; size=&amp;quot;75&amp;quot; type=&amp;quot;text&amp;quot;/&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        Email:
        &amp;lt;input name=&amp;quot;email&amp;quot; required=&amp;quot;&amp;quot; size=&amp;quot;75&amp;quot; type=&amp;quot;email&amp;quot;/&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;input name=&amp;quot;submit&amp;quot; type=&amp;quot;submit&amp;quot; value=&amp;quot;submit&amp;quot;/&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;/form&amp;gt;       
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make sure everything is working this far, on a separate window, navigate to  yourusername.github.io. You should be able to see your new website (it might take a few minutes). Should look similar to this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cloudup.com/c7XrmvISWfJ+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-implement-segment&quot;&gt;4. Implement Segment&lt;/h2&gt;
&lt;p&gt;Create an account on &lt;a href=&quot;https://segment.com&quot;&gt;Segment&lt;/a&gt; and a new project by selecting “new project” from the top right dropdown menu:
&lt;img src=&quot;https://cloudup.com/czuUe3gBBTj+&quot; alt=&quot;&quot;&gt;
Click on the “install a library in your site or mobile app” option (or select it by clicking on the 6th icon called “setup project”)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cloudup.com/co7DtWt5aOO+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Copy the full snippet from the box on your segment dashboard, go back to your &lt;code&gt;index.html&lt;/code&gt; file, select the pencil to edit, and replace the line that reads &lt;code&gt;&amp;lt;!--Placeholder for Segment Snippet --&amp;gt;&lt;/code&gt; (mine is line 8) with the Segment snippet.&lt;/p&gt;
&lt;p&gt;Your new file should look like this:
&lt;img src=&quot;https://cloudup.com/ckTqBYoDp7L+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-identify-users-and-track-an-event&quot;&gt;5. Identify Users and Track an Event&lt;/h2&gt;
&lt;p&gt;Identify those users that submit a destination. To do so, we created a little function that captures the input from the form, and sends some of that data as traits in an identify call. While we are at it, lets also send an event using the .track method called “destination submitted.”  We are going to do that on the same index.html file, so if you haven’t committed your changes yet (if you have, just open to edit the index.html file again), scroll down to the line after the &lt;code&gt;&amp;lt;/form&amp;gt;&lt;/code&gt; tag (mine is line 38) and insert the following text.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        function identify(e){
        e.preventDefault();
        var form = e.target;
        var email = form[&amp;quot;email&amp;quot;].value;
        var fullname = form[&amp;quot;fullname&amp;quot;].value;
        var destination = form[&amp;quot;destination&amp;quot;];
        var details = form[&amp;quot;details&amp;quot;].value;
        var user = {email: email, name: fullname, destination: destination, details: details};
        analytics.identify(email, {email: email, name: fullname});
        analytics.track(&amp;#39;destination submitted&amp;#39;, user, function() {
            window.location.href = &amp;quot;&amp;quot;;
        });
        }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your index.html file should contain code similar to the one found &lt;a href=&quot;https://gist.github.com/TheBecky/76eaa40b43a82a900c82&quot;&gt;here&lt;/a&gt; (with your project’s Segment write key in line 10). Commit the changes. &lt;/p&gt;
&lt;p&gt;Go back to your website (refresh to make sure all changes have been loaded) and submit a travel recommendation form.
&lt;img src=&quot;https://cloudup.com/cdWxA9BwOdr+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Go to your debugger on the Segment’s dash. You should be able to see the following 3 calls:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cloudup.com/c245KeijI5E+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Enable Google Analytics, MixPanel and KissMetrics. You might have to create an account on each of those services to get the site IDs, tokens or keys necessary to input in Segment’s dash.&lt;/p&gt;
&lt;p&gt;If something is not right and you triple checked that your code is similar to the one &lt;a href=&quot;https://gist.github.com/TheBecky/76eaa40b43a82a900c82&quot;&gt;here&lt;/a&gt; (and you just created a Github account only to complete this project), make sure that you have confirmed your email address on that Github email.&lt;/p&gt;
&lt;h2 id=&quot;6-bonus-step&quot;&gt;6. Bonus Step&lt;/h2&gt;
&lt;p&gt;Right now the debugger is showing “/” on our page call. This is because we are in the home page - if we were in another page, the debugger should show /blog or /countries or whatever path you are in. Wouldn’t it be nice that the page call had the actual title of the page instead of the path? To do that, you just have to replace &lt;code&gt;analytics.page()&lt;/code&gt; in your index.html file (mine is in line 11) with  &lt;code&gt;analytics.page(document.title)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Your calls should now look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cloudup.com/cbaLOR5Jjjb+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Congratulations! You just finished Module 1 of this training series.&lt;/p&gt;
&lt;p&gt;One thing worth pointing out is that for simplicity purposes we didn’t follow Segment’s best practices when assigning a random userID for each user. Instead, we sent our user’s email address as the userID and that will not make Sperandio proud. The reason that sending the email is less than ideal, is because users can have many email addresses and we dont want to count one user multiple times.&lt;/p&gt;
&lt;p&gt;In module 2 we will  integrate with Optimizely and Keen. Optimizely is an interesting one, as its the only integration that requires their snippet to also be loaded into our page.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ASCII, Unicode and alphanumeric lists</title>
    <link href="http://blog.datasommelier.com/ASCII-and-Unicode"/>
    <id>http://blog.datasommelier.com/ASCII-and-Unicode</id>
    <updated>2015-02-23T00:00:00.000Z</updated>
    <author>
      <name>Becky Jaimes</name>
    </author>
    <summary type="html">&lt;p&gt;Intricacies of native sorting&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Intricacies of native sorting&lt;/p&gt;
&lt;p&gt;Using native sorting functions to order lists that contain alphanumeric strings will &lt;em&gt;most of the time&lt;/em&gt; yield unexpected results. For example, when using a program to order a list of flights in ascending order, the results are most likely to resemble the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Flight&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA1006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA1008&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA1009&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA289&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA327&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA3444&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA5445&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA570&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Most text editors serve as binary-to-symbol translators. In this case, the above table was typed on a text editor and was stored in some location as a set of ASCII, Unicode or some other type of binary values. The result of sorting that translation is a “lexical” sort meaning that “1006” comes before “289”.&lt;/p&gt;
&lt;h6 id=&quot;what-are-ascii-values-&quot;&gt;What are ASCII Values?&lt;/h6&gt;
&lt;p&gt;ASCII stands for American Standard Code for Information Interchange. ASCII is a binary file format that assigns a 7-bit binary value (a string of seven 0s and 1s) to alphanumeric, numeric and some special characters — most keys on the standard keyboard.&lt;/p&gt;
&lt;p&gt;ASCII code was first introduced in the early 1960’s and was based on a system used in telegraphy. In ASCII, numbers &lt;strong&gt;0&lt;/strong&gt; to &lt;strong&gt;9&lt;/strong&gt; are assigned smaller values than upper case letters &lt;strong&gt;A&lt;/strong&gt; to &lt;strong&gt;Z&lt;/strong&gt;, and upper case letters are assigned smaller values than lower case letters &lt;strong&gt;a&lt;/strong&gt; to &lt;strong&gt;z&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This type of sorting is efficient for machines and produces reasonable results when using the English alphabet. However, since ASCII is American centric it presents limitations for Asian languages and other languages that contain characters outside of the English alphabet.&lt;/p&gt;
&lt;h6 id=&quot;unicode&quot;&gt;Unicode&lt;/h6&gt;
&lt;p&gt;Unicode is a newer (1987) standard for representing characters. It also stores characters in binary form, but rather than using only 7-bits, Unicode is based in 16-bit binary values which allows more than 1,000,000 possible character representations (as opposed to ASCII’s 128 character limit). Currently, Unicode includes characters from most popular languages and preserved the order of the first 128 ASCII characters. Although many languages were originally based on ASCII (Python, R, C and C++), Unicode has been implemented in many recent technologies and supported by most languages.&lt;/p&gt;
&lt;p&gt;When sorting lists that allow alphanumeric characters on a string, in most programs, is necessary to define a custom sorting algorithm that does not relay in the order of individual character’s codes - some places refer to it as “natural sorting.” A comprehensive list of natural sorting algorithms in most languages can be found &lt;a href=&quot;http://rosettacode.org/wiki/Natural_sorting&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>