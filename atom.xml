<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Becky Jaimes</title>
  <link href="http://jaimes.me/atom.xml" rel="self"/>
  <link href="http://jaimes.me"/>
  <updated>2016-01-15T03:46:51.221Z</updated>
  <id>http://jaimes.me</id>
  <author>
    <name>Becky Jaimes</name>
  </author>
  <entry>
    <title>Sign in with Google, Github, or Twitter</title>
    <link href="http://jaimes.me/Sign-in-with-Google-Github-or-Twitter"/>
    <id>http://jaimes.me/Sign-in-with-Google-Github-or-Twitter</id>
    <updated>2016-01-10T00:00:00.000Z</updated>
    <author>
      <name>Becky Jaimes</name>
    </author>
    <summary type="html">&lt;p&gt;When you should or shouldn’t&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;When you should or shouldn’t&lt;/p&gt;
&lt;p&gt;The joys of password creation! Some sites require passwords with at least 6 characters, others require at least one number and a character (but make sure that the character is not a \ ), others require you to have both a capital and a lower case letter… and make sure that the capital letter is not at the begining or at the end of the password. Oh, also make sure your password is unique to the site, and that you change it often. Inevitably, we all end up creating just one password. One really good password, you know, something like &lt;code&gt;pAssw0rd!&lt;/code&gt; and then use that REALLY good password for every site. And never change it. &lt;/p&gt;
&lt;p&gt;One problem with this technique is that if a site’s database is compromised, access to all other sites is compromised. We’ve heard that a thousand times already, however, and to most of us, the risk outweighs the annoyance. Note: If you click on “Forgot password” on any site and get an email with your actual password, run away from that service - your data is being handled by amateurs. If the site is able to send an email with the password you created, it means that the site is either saving your password in plain text, or is storing a simple encryption of your password. Storing plaintext or encrypted passwords with a simple key are the easiest methods for developers to handle passwords, and also the easiest to access by an attacker. A safer way for sites to deal with passwords is by saving a salted version of the &lt;a href=&quot;https://crackstation.net/hashing-security.htm&quot;&gt;hashed password&lt;/a&gt; - a little more involved process from the developer standpoint. An even safer way to deal with passwords is using an encryption algorithm such as &lt;a href=&quot;http://bcrypt.sourceforge.net/&quot;&gt;bcryt&lt;/a&gt;, which is (you guessed it) an even more involved process for the developer. The safest way for sites to deal with passwords is to not deal with passwords at all. &lt;/p&gt;
&lt;p&gt;If you use your one really good password on every site, you will be better off logging in with either Google, Github, Twitter or any other site that offers a login service—in particular if your really good password is what you also use to login into any of those sites. The service is called oAuth. oAuth exchanges security keys between the new site and Google, Github or Twitter and they handle the logging without involving the creation of new passwords. Sometimes the new sites will ask your permission to export into their site additional data from Google, usually, your email address and avatar. Some more creepy services ask for permission to access your contacts, demographic and geographic data, and others ask your permission to actually act on your behalf into the service (i.e. Tweet for you). &lt;/p&gt;
&lt;p&gt;Initially, you may be confused why Google, Github, or Twitter would offer a free service to handle logins through oAuth. Altruism? One motivation is to leverage as many services as possible to your account in order to reduce the chances of you churning and closing that account. For Google, the motivation might be more geared towards tracking which apps you use and how often. A newer and more interesting oAuth service provider is the banking industry. Now you can use your American Express login credentials to sign up to AirBnb, granting AirBnb access some data from your Amex account. When using oAuth is always important to check what data access or permissions you are granting to the new site.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LxgZ0Ry.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Unless the new site is asking for too much data, for me, the benefits from oAuth almost always outweighs the risk of compromising my REALLY good password. Even if that means granting access to additional basic data points so that Google can have a clearer picture of “Who you are to Google.”&lt;/p&gt;
&lt;p&gt;To review the list of authorized applications on each of your accounts go to: &lt;a href=&quot;https://security.google.com/settings/security/permissions&quot;&gt;Google&lt;/a&gt;, &lt;a href=&quot;https://help.github.com/articles/keeping-your-ssh-keys-and-application-access-tokens-safe/#reviewing-your-authorized-applications-oauth&quot;&gt;Github&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/settings/applications&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Coming next: Who you are to Google &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ASCII, Unicode and alphanumeric lists</title>
    <link href="http://jaimes.me/ASCII-and-Unicode"/>
    <id>http://jaimes.me/ASCII-and-Unicode</id>
    <updated>2015-12-23T00:00:00.000Z</updated>
    <author>
      <name>Becky Jaimes</name>
    </author>
    <summary type="html">&lt;p&gt;Why native sorting looks funky&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Why native sorting looks funky&lt;/p&gt;
&lt;p&gt;Using native sorting functions to order lists that contain alphanumeric strings will &lt;em&gt;most of the time&lt;/em&gt; yield unexpected results. For example, when using a program to order a list of flights in ascending order, the results are most likely to resemble the following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Flight&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA1006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA1008&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA1009&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA289&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA327&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA3444&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA5445&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;UA570&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Most text editors serve as binary-to-symbol translators. In this case, the above table was typed on a text editor and was stored in some location as a set of ASCII, Unicode or some other type of binary values. The result of sorting that translation is a “lexical” sort meaning that “1006” comes before “289”.&lt;/p&gt;
&lt;h6 id=&quot;what-are-ascii-values-&quot;&gt;What are ASCII Values?&lt;/h6&gt;
&lt;p&gt;ASCII stands for American Standard Code for Information Interchange. ASCII is a binary file format that assigns a 7-bit binary value (a string of seven 0s and 1s) to alphanumeric, numeric and some special characters — most keys on the standard keyboard.&lt;/p&gt;
&lt;p&gt;ASCII code was first introduced in the early 1960’s and was based on a system used in telegraphy. In ASCII, numbers &lt;strong&gt;0&lt;/strong&gt; to &lt;strong&gt;9&lt;/strong&gt; are assigned smaller values than upper case letters &lt;strong&gt;A&lt;/strong&gt; to &lt;strong&gt;Z&lt;/strong&gt;, and upper case letters are assigned smaller values than lower case letters &lt;strong&gt;a&lt;/strong&gt; to &lt;strong&gt;z&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This type of sorting is efficient for machines and produces reasonable results when using the English alphabet. However, since ASCII is American centric it presents limitations for Asian languages and other languages that contain characters outside of the English alphabet.&lt;/p&gt;
&lt;h6 id=&quot;unicode&quot;&gt;Unicode&lt;/h6&gt;
&lt;p&gt;Unicode is a newer (1987) standard for representing characters. It also stores characters in binary form, but rather than using only 7-bits, Unicode is based in 16-bit binary values which allows more than 1,000,000 possible character representations (as opposed to ASCII’s 128 character limit). Currently, Unicode includes characters from most popular languages and preserved the order of the first 128 ASCII characters. Although many languages were originally based on ASCII (Python, R, C and C++), Unicode has been implemented in many recent technologies and supported by most languages.&lt;/p&gt;
&lt;p&gt;When sorting lists that allow alphanumeric characters on a string, in most programs, is necessary to define a custom sorting algorithm that does not relay in the order of individual character’s codes - some places refer to it as “natural sorting.” A comprehensive list of natural sorting algorithms in most languages can be found &lt;a href=&quot;http://rosettacode.org/wiki/Natural_sorting&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Module 1. Implementing Segment</title>
    <link href="http://jaimes.me/module-1"/>
    <id>http://jaimes.me/module-1</id>
    <updated>2015-07-07T00:00:00.000Z</updated>
    <author>
      <name>Becky Jaimes</name>
    </author>
    <summary type="html">&lt;p&gt;Build a single page website and implement Segment from scratch in 5 steps. Completion time 45 minutes&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Build a single page website and implement Segment from scratch in 5 steps. Completion time 45 minutes&lt;/p&gt;
&lt;h2 id=&quot;1-create-an-account&quot;&gt;1. Create an Account&lt;/h2&gt;
&lt;p&gt;Create an account in GitHub (&lt;a href=&quot;https://github.com/new&quot;&gt;https://github.com/new&lt;/a&gt;) or sign in. If you are creating a new account, make sure to confirm your email address (go to your email and click on the confirm button on the message from Github). Some files will not update later if you haven’t confirmed your email address.&lt;/p&gt;
&lt;h2 id=&quot;2-create-a-repo&quot;&gt;2. Create a Repo&lt;/h2&gt;
&lt;p&gt;Create a new repository (click on the black + sign on the top right) and call it &lt;code&gt;yourusername.github.io&lt;/code&gt; . Since we are using Github pages to host this site, it is very important to follow the exact naming convention &lt;strong&gt;[YOUR USERNAME].github.io&lt;/strong&gt;. In my case, my new repository is called &lt;code&gt;beckyjaimes.github.io&lt;/code&gt;, check the box that initializes the repo with a README file, and click on the “Create repository” button.
&lt;img src=&quot;https://cloudup.com/ch3rFGk5D3P+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-create-an-index-html-file&quot;&gt;3. Create an index.html file&lt;/h2&gt;
&lt;p&gt;Create a new file by clicking on the blue + symbol next to your new repository’s name and call it index.html (this file will contain the code for your website’s default page)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cloudup.com/c0cFaR-2xwe+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;On that &lt;code&gt;index.html&lt;/code&gt; file, insert the following text, and commit that file by clicking on the green “Commit” button:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Home Questionaire&amp;lt;/title&amp;gt;
        &amp;lt;!--Placeholder for Google Analytics Snippet --&amp;gt;
        &amp;lt;!--Placeholder for MixPanel Snippet --&amp;gt;
        &amp;lt;!--Placeholder for KissMetrics Snippet --&amp;gt;
        &amp;lt;!--Placeholder for Segment Snippet --&amp;gt;
        &amp;lt;!--Placeholder for index.css link --&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;    
&amp;lt;br&amp;gt;
&amp;lt;h1&amp;gt;What is your favorite place to travel?&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;I am building a directory of the sweetest travel destinations.&amp;lt;/p&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;form name=&amp;quot;travel&amp;quot; onsubmit=&amp;quot;identify(event)&amp;quot;&amp;gt;
        What is your favorite travel destination?
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;input name=&amp;quot;destination&amp;quot; required=&amp;quot;&amp;quot; size=&amp;quot;81&amp;quot; type=&amp;quot;text&amp;quot;/&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        Any reccomendations (cool things to do, places to visit or restaurants to eat)?
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;textarea cols=&amp;quot;81&amp;quot; name=&amp;quot;details&amp;quot; required=&amp;quot;&amp;quot; rows=&amp;quot;10&amp;quot;&amp;gt;&amp;lt;/textarea&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        Name:
        &amp;lt;input name=&amp;quot;fullname&amp;quot; required=&amp;quot;&amp;quot; size=&amp;quot;75&amp;quot; type=&amp;quot;text&amp;quot;/&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        Email:
        &amp;lt;input name=&amp;quot;email&amp;quot; required=&amp;quot;&amp;quot; size=&amp;quot;75&amp;quot; type=&amp;quot;email&amp;quot;/&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;input name=&amp;quot;submit&amp;quot; type=&amp;quot;submit&amp;quot; value=&amp;quot;submit&amp;quot;/&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;/form&amp;gt;       
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make sure everything is working this far, on a separate window, navigate to  yourusername.github.io. You should be able to see your new website (it might take a few minutes). Should look similar to this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cloudup.com/c7XrmvISWfJ+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-implement-segment&quot;&gt;4. Implement Segment&lt;/h2&gt;
&lt;p&gt;Create an account on &lt;a href=&quot;https://segment.com&quot;&gt;Segment&lt;/a&gt; and a new project by selecting “new project” from the top right dropdown menu:
&lt;img src=&quot;https://cloudup.com/czuUe3gBBTj+&quot; alt=&quot;&quot;&gt;
Click on the “install a library in your site or mobile app” option (or select it by clicking on the 6th icon called “setup project”)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cloudup.com/co7DtWt5aOO+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Copy the full snippet from the box on your segment dashboard, go back to your &lt;code&gt;index.html&lt;/code&gt; file, select the pencil to edit, and replace the line that reads &lt;code&gt;&amp;lt;!--Placeholder for Segment Snippet --&amp;gt;&lt;/code&gt; (mine is line 8) with the Segment snippet.&lt;/p&gt;
&lt;p&gt;Your new file should look like this:
&lt;img src=&quot;https://cloudup.com/ckTqBYoDp7L+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-identify-users-and-track-an-event&quot;&gt;5. Identify Users and Track an Event&lt;/h2&gt;
&lt;p&gt;Identify those users that submit a destination. To do so, we created a little function that captures the input from the form, and sends some of that data as traits in an identify call. While we are at it, lets also send an event using the .track method called “destination submitted.”  We are going to do that on the same index.html file, so if you haven’t committed your changes yet (if you have, just open to edit the index.html file again), scroll down to the line after the &lt;code&gt;&amp;lt;/form&amp;gt;&lt;/code&gt; tag (mine is line 38) and insert the following text.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        function identify(e){
        e.preventDefault();
        var form = e.target;
        var email = form[&amp;quot;email&amp;quot;].value;
        var fullname = form[&amp;quot;fullname&amp;quot;].value;
        var destination = form[&amp;quot;destination&amp;quot;];
        var details = form[&amp;quot;details&amp;quot;].value;
        var user = {email: email, name: fullname, destination: destination, details: details};
        analytics.identify(email, {email: email, name: fullname});
        analytics.track(&amp;#39;destination submitted&amp;#39;, user, function() {
            window.location.href = &amp;quot;&amp;quot;;
        });
        }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your index.html file should contain code similar to the one found &lt;a href=&quot;https://gist.github.com/TheBecky/76eaa40b43a82a900c82&quot;&gt;here&lt;/a&gt; (with your project’s Segment write key in line 10). Commit the changes. &lt;/p&gt;
&lt;p&gt;Go back to your website (refresh to make sure all changes have been loaded) and submit a travel recommendation form.
&lt;img src=&quot;https://cloudup.com/cdWxA9BwOdr+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Go to your debugger on the Segment’s dash. You should be able to see the following 3 calls:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cloudup.com/c245KeijI5E+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Enable Google Analytics, MixPanel and KissMetrics. You might have to create an account on each of those services to get the site IDs, tokens or keys necessary to input in Segment’s dash.&lt;/p&gt;
&lt;p&gt;If something is not right and you triple checked that your code is similar to the one &lt;a href=&quot;https://gist.github.com/TheBecky/76eaa40b43a82a900c82&quot;&gt;here&lt;/a&gt; (and you just created a Github account only to complete this project), make sure that you have confirmed your email address on that Github email.&lt;/p&gt;
&lt;h2 id=&quot;6-bonus-step&quot;&gt;6. Bonus Step&lt;/h2&gt;
&lt;p&gt;Right now the debugger is showing “/” on our page call. This is because we are in the home page - if we were in another page, the debugger should show /blog or /countries or whatever path you are in. Wouldn’t it be nice that the page call had the actual title of the page instead of the path? To do that, you just have to replace &lt;code&gt;analytics.page()&lt;/code&gt; in your index.html file (mine is in line 11) with  &lt;code&gt;analytics.page(document.title)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Your calls should now look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cloudup.com/cbaLOR5Jjjb+&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Congratulations! You just finished Module 1 of this training series.&lt;/p&gt;
&lt;p&gt;One thing worth pointing out is that for simplicity purposes we didn’t follow Segment’s best practices when assigning a random userID for each user. Instead, we sent our user’s email address as the userID and that will not make Sperandio proud. The reason that sending the email is less than ideal, is because users can have many email addresses and we dont want to count one user multiple times.&lt;/p&gt;
&lt;p&gt;In module 2 we will  integrate with Optimizely and Keen. Optimizely is an interesting one, as its the only integration that requires their snippet to also be loaded into our page.&lt;/p&gt;
</content>
  </entry>
</feed>